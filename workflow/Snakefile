
from os.path import splitext

common = ""

rule all:
	input:
		"mmseqs/hulaclust50.index"

def get_root(namedlist):
	roots = []
	n = len(namedlist)
	m = len(namedlist.keys())
	for i in range(0, n - m):
		root, ext = splitext(namedlist[i])
		roots.append(root)
	return(roots)

def root_in(wildcards, input):
	return get_root(input)

def root_out(wildcards, output):
	return get_root(output)

rule createdb:
	input:
		"input/longest_orfs.pep"
	output:
		"mmseqs/hulaprot_db"
	params:
		max_seq_len = 14000 # not used
	shell:
		"mmseqs createdb {input} {output}"

rule prefilter_FRAG:
	input:
		"mmseqs/hulaprot_db"
	output:
		"mmseqs/pref_step_FRAG.index"
	params:
		output = root_out,
		max_seqs = 4000,
		min_ungapped_score = 100
	threads:
		workflow.cores
	shell:
		"mmseqs prefilter {input} {input} {params.output} --threads {threads} --max-seqs {params.max_seqs} --min-ungapped-score {params.min_ungapped_score} --comp-bias-corr 0 -s 1"

rule rescorediagonal_FRAG:
	input:
		"mmseqs/pref_step_FRAG.index",
		db = "mmseqs/hulaprot_db"
	output:
		"mmseqs/aln_step_FRAG.index"
	params:
		input  = root_in,
		output = root_out,
		cov = 0.95,
		min_seq_id = 0.9
	threads:
		workflow.cores
	shell:
		"mmseqs rescorediagonal {input.db} {input.db} {params.input} {params.output} --threads {threads} --min-seq-id {params.min_seq_id} -c {params.cov}"

rule clust_FRAG:
	input:
		"mmseqs/aln_step_FRAG.index",
		db = "mmseqs/hulaprot_db"
	output:
		"mmseqs/clu_frag.index"
	params:
		input  = root_in,
		output = root_out,
		cluster_mode = 2
	threads:
		workflow.cores
	shell:
		"mmseqs clust {input.db} {params.input} {params.output} --threads {threads} --cluster-mode {params.cluster_mode}"

rule order_frag:
	input:
		"mmseqs/clu_frag.index"
	output:
		"mmseqs/order_frag"
	shell:
		"cut -f1 {input} > {output}"

rule createsubdb_redundancy:
	input:
		order = "mmseqs/order_frag",
		db = "mmseqs/hulaprot_db"
	output:
		"mmseqs/input_step_redundancy.index"
	params:
		output = root_out
	shell:
		"mmseqs createsubdb {input.order} {input.db} {params.output}"

rule clusthash_redundancy:
	input:
		"mmseqs/input_step_redundancy.index"
	output:
		"mmseqs/aln_redundancy.index"
	params:
		input  = root_in,
		output = root_out,
		min_seq_id = 0.9
	threads:
		workflow.cores
	shell:
		"mmseqs clusthash {params.input} {params.output} --threads {threads} --min-seq-id {params.min_seq_id}"

rule clust_redundancy:
	input:
		"mmseqs/input_step_redundancy.index",
		"mmseqs/aln_redundancy.index"
	output:
		"mmseqs/clu_redundancy.index"
	params:
		input  = root_in,
		output = root_out,
		cluster_mode = 2
	threads:
		workflow.cores
	shell:
		"mmseqs clust {params.input} {params.output} --cluster-mode {params.cluster_mode}"

rule order_redundancy:
	input:
		"mmseqs/clu_redundancy.index"
	output:
		"mmseqs/order_redundancy"
	shell:
		"cut -f1 {input} > {output}"

rule createsubdb_step0:
	input:
		db = "mmseqs/hulaprot_db",
		order = "mmseqs/order_redundancy"
	output:
		"mmseqs/input_step0.index"
	params:
		output = root_out
	shell:
		"mmseqs createsubdb {input.order} {input.db} {params.output}"

rule createsubdb_FRAG_filtered:
	input:
		"mmseqs/pref_step_FRAG.index",
		order = "mmseqs/order_redundancy"
	output:
		"mmseqs/pref_step_FRAG_filtered.index"
	params:
		input  = root_in,
		output = root_out
	shell:
		"mmseqs createsubdb {input.order} {params.input} {params.output}"

rule filterdb_step0:
	input:
		"mmseqs/pref_step_FRAG_filtered.index",
		order = "mmseqs/order_redundancy"
	output:
		"mmseqs/pref_step0.index"
	params:
		input  = root_in,
		output = root_out
	threads:
		workflow.cores
	shell:
		"mmseqs filterdb {params.input} {params.output} --threads {threads} --filter-file {input.order}"

rule align_step0:
	input:
		"mmseqs/input_step0.index",
		"mmseqs/pref_step0.index"
	output:
		"mmseqs/aln_step0.index"
	params:
		input  = root_in,
		output = root_out,
		# max_seqs = 100, # not used
		c = 0.9,
		alignment_mode = 2,
		min_seq_id = 0.9,
		comp_bias_corr = 0,
		e = 0.001,
		max_seq_len = 32768,
		max_rejected = 2147483647,
		common = common
	threads:
		workflow.cores
	shell:
		"mmseqs align {params.input[0]} {params.input} {params.output} --threads {threads} -c {params.c} --alignment-mode {params.alignment_mode} --min-seq-id {params.min_seq_id} --comp-bias-corr {params.comp_bias_corr} -e {params.e} --max-seq-len {params.max_seq_len} --max-rejected {params.max_rejected} {params.common}"

rule clust_step0:
	input:
		"mmseqs/input_step0.index",
		"mmseqs/aln_step0.index"
	output:
		"mmseqs/clu_step0.index"
	params:
		input  = root_in,
		output = root_out,
		cluster_mode = 2
	threads:
		workflow.cores
	shell:
		"mmseqs clust {params.input} {params.output} --threads {threads} --cluster-mode {params.cluster_mode}"

rule order_step0:
	input:
		"mmseqs/clu_step0.index"
	output:
		"mmseqs/order_step0"
	shell:
		"cut -f1 {input} > {output}"

rule createsubdb_step1:
	input:
		"mmseqs/input_step0.index",
		order = "mmseqs/order_step0"
	output:
		"mmseqs/input_step1.index"
	params:
		input  = root_in,
		output = root_out
	shell:
		"mmseqs createsubdb {input.order} {params.input} {params.output}"

rule prefilter_step1:
	input:
		"mmseqs/input_step1.index"
	output:
		"mmseqs/pref_step1.index"
	params:
		input  = root_in,
		output = root_out,
		# max_seqs = 100, # not used
		c = 0.9,
		comp_bias_corr = 1,
		s = 2,
		common = common
	threads:
		workflow.cores
	shell:
		"mmseqs prefilter {params.input} {params.input} {params.output} --threads {threads} -c {params.c} --comp-bias-corr {params.comp_bias_corr} -s {params.s} {params.common}"

rule align_step1:
	input:
		"mmseqs/input_step1.index",
		"mmseqs/pref_step1.index"
	output:
		"mmseqs/aln_step1.index"
	params:
		input  = root_in,
		output = root_out,
		# max_seqs = 100, # not used
		c = 0.8,
		alignment_mode = 2,
		min_seq_id = 0.9,
		comp_bias_corr = 1,
		e = 0.001,
		max_seq_len = 32768,
		max_rejected = 2147483647,
		common = common
	threads:
		workflow.cores
	shell:
		"mmseqs align {params.input[0]} {params.input} {params.output} --threads {threads} -c {params.c} --alignment-mode {params.alignment_mode} --min-seq-id {params.min_seq_id} --comp-bias-corr {params.comp_bias_corr} -e {params.e} --max-seq-len {params.max_seq_len} --max-rejected {params.max_rejected} {params.common}"

rule clust_step1:
	input:
		"mmseqs/input_step1.index",
		"mmseqs/aln_step1.index"
	output:
		"mmseqs/clu_step1.index"
	params:
		input  = root_in,
		output = root_out,
		cluster_mode = 0
	threads:
		workflow.cores
	shell:
		"mmseqs clust {params.input} {params.output} --threads {threads} --cluster-mode {params.cluster_mode}"

rule mergeclusters_hulaclust90:
	input:
		"mmseqs/clu_frag.index",
		"mmseqs/clu_redundancy.index",
		"mmseqs/clu_step0.index",
		"mmseqs/clu_step1.index",
		db = "mmseqs/hulaprot_db"
	output:
		"mmseqs/hulaclust90"
	params:
		input  = root_in,
		output = root_out
	threads:
		workflow.cores
	shell:
		"mmseqs mergeclusters {input.db} {params.output} {params.input} --threads {threads}"

rule order_step1:
	input:
		"mmseqs/clu_step1.index"
	output:
		"mmseqs/order_step1"
	shell:
		"cut -f1 {input} > {output}"

rule createsubdb_step2:
	input:
		"mmseqs/input_step1.index",
		order = "mmseqs/order_step1"
	output:
		"mmseqs/input_step2.index"
	params:
		input  = root_in,
		output = root_out
	shell:
		"mmseqs createsubdb {input.order} {params.input} {params.output}"

rule prefilter_step2:
	input:
		"mmseqs/input_step2.index"
	output:
		"mmseqs/pref_step2.index"
	params:
		input  = root_in,
		output = root_out,
		# max_seqs = 300, # not used
		c = 0.8,
		comp_bias_corr = 1,
		s = 6,
		common = common
	threads:
		workflow.cores
	shell:
		"mmseqs prefilter {params.input} {params.input} {params.output} --threads {threads} -c {params.c} --comp-bias-corr {params.comp_bias_corr} -s {params.s} {params.common}"

rule align_step2:
	input:
		"mmseqs/input_step2.index",
		"mmseqs/pref_step2.index"
	output:
		"mmseqs/aln_step2.index"
	params:
		input  = root_in,
		output = root_out,
		# max_seqs = 300, # not used
		c = 0.8,
		alignment_mode = 3,
		min_seq_id = 0.3,
		comp_bias_corr = 1,
		e = 0.001,
		max_seq_len = 32768, 
		max_rejected = 2147483647,
		common = common
	threads:
		workflow.cores
	shell:
		"mmseqs align {params.input[0]} {params.input} {params.output} --threads {threads} -c {params.c} --alignment-mode {params.alignment_mode} --min-seq-id {params.min_seq_id} --comp-bias-corr {params.comp_bias_corr} -e {params.e} --max-seq-len {params.max_seq_len} --max-rejected {params.max_rejected} {params.common}"

rule filterdb_hulaclust50:
	input:
		"mmseqs/aln_step2.index"
	output:
		"mmseqs/aln_hulaclust50.index"
	params:
		input  = root_in,
		output = root_out
	threads:
		workflow.cores
	shell:
		"mmseqs filterdb {params.input} {params.output} --threads {threads} --filter-column 3 --filter-regex '(0\\.[5-9][0-9]{{2}}|1\\.000)'"

rule clust_hulaclust50:
	input:
		"mmseqs/input_step2.index",
		"mmseqs/aln_hulaclust50.index"
	output:
		"mmseqs/clu_hulaclust50.index"
	params:
		input  = root_in,
		output = root_out,
		cluster_mode = 0
	threads:
		workflow.cores
	shell:
		"mmseqs clust {params.input} {params.output} --threads {threads} --cluster-mode {params.cluster_mode}"

rule mergeclusters_hulaclust50:
	input:
		"mmseqs/clu_frag.index",
		"mmseqs/clu_redundancy.index",
		"mmseqs/clu_step0.index",
		"mmseqs/clu_step1.index",
		"mmseqs/clu_hulaclust50.index",
		db = "mmseqs/hulaprot_db"
	output:
		"mmseqs/hulaclust50.index"
	params:
		input  = root_in,
		output = root_out
	threads:
		workflow.cores
	shell:
		"mmseqs mergeclusters {input.db} {params.output} {params.input} --threads {threads}"

